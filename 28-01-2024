int** array(const int arrSize, const int arrColSize) {
    int** arr = (int**)calloc(arrSize, sizeof(int*));
    for (int i = 0; i < arrSize; i++) {
        arr[i] = (int*)calloc(arrColSize, sizeof(int));
    }
    return arr;
}
void array1(int*** arr, const int arrSize, const int arrColSize) {
    for (int i = 0; i < arrSize; i++) {
        free((*arr)[i]);
    }
    free((*arr));
}
int numSubmatrixSumTarget(int** matrix, int matrixSize, int* matrixColSize, int target) {
  const int m = matrixSize, n = matrixColSize[0];
    int result = 0;
    int** sums =array(m + 1, n + 1);
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            sums[i][j] = sums[i][j - 1] + sums[i - 1][j] - sums[i - 1][j - 1] + matrix[i - 1][j - 1];
        }
    }
    int temp = 0;  
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            for (int p = 1; p <= i; p++) {
                for (int q = 1; q <= j; q++) {
                    temp = sums[i][j] - sums[i][q - 1] - sums[p - 1][j] + sums[p - 1][q - 1];
                    if (temp == target) result++;
                }
            }
        }
    }
    array1(&sums, m + 1, n + 1);
    return result;
}
