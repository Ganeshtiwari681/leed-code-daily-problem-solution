
int max(int a, int b) {
    return (a > b) ? a : b;
}

bool isUnique(char *str, unsigned int *seen) {
    for (int i = 0; i < strlen(str); i++) {
        if ((*seen >> (str[i] - 'a')) & 1)
            return false;
        *seen |= 1 << (str[i] - 'a');
    }
    return true;
}

void backtrack(char **arr, int arrSize, int start, unsigned int seen, int *maxLength) {
    *maxLength = max(*maxLength, __builtin_popcount(seen));
    for (int i = start; i < arrSize; i++) {
        unsigned int seenCopy = seen;
        if (isUnique(arr[i], &seenCopy)) {
            backtrack(arr, arrSize, i + 1, seenCopy, maxLength);
        }
    }
}

int maxLength(char **arr, int arrSize) {
    int ans = 0;
    unsigned int seen = 0;
    backtrack(arr, arrSize, 0, seen, &ans);
    return ans;
}
